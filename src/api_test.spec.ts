/**
 * Swagger Generator
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 3.0.21
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ClientsApi", () => {
  let instance: api.ClientsApi
  beforeEach(function() {
    instance = new api.ClientsApi(config)
  });

  test("clientLanguages", () => {
    const version: string = "version_example"
    const clientOnly: boolean = true
    return expect(instance.clientLanguages(version, clientOnly, {})).resolves.toBe(null)
  })
  test("generate", () => {
    const body: api.GenerationRequest = undefined
    return expect(instance.generate(body, {})).resolves.toBe(null)
  })
  test("generateFromURL", () => {
    const codegenOptionsURL: string = "codegenOptionsURL_example"
    return expect(instance.generateFromURL(codegenOptionsURL, {})).resolves.toBe(null)
  })
  test("languages", () => {
    const type: string = "type_example"
    const version: string = "version_example"
    return expect(instance.languages(type, version, {})).resolves.toBe(null)
  })
  test("languagesMulti", () => {
    const types: Array<string> = undefined
    const version: string = "version_example"
    return expect(instance.languagesMulti(types, version, {})).resolves.toBe(null)
  })
  test("listOptions", () => {
    const language: string = "language_example"
    const version: string = "version_example"
    return expect(instance.listOptions(language, version, {})).resolves.toBe(null)
  })
})

describe("ConfigApi", () => {
  let instance: api.ConfigApi
  beforeEach(function() {
    instance = new api.ConfigApi(config)
  });

  test("generate", () => {
    const body: api.GenerationRequest = undefined
    return expect(instance.generate(body, {})).resolves.toBe(null)
  })
  test("generateFromURL", () => {
    const codegenOptionsURL: string = "codegenOptionsURL_example"
    return expect(instance.generateFromURL(codegenOptionsURL, {})).resolves.toBe(null)
  })
  test("languages", () => {
    const type: string = "type_example"
    const version: string = "version_example"
    return expect(instance.languages(type, version, {})).resolves.toBe(null)
  })
  test("languagesMulti", () => {
    const types: Array<string> = undefined
    const version: string = "version_example"
    return expect(instance.languagesMulti(types, version, {})).resolves.toBe(null)
  })
  test("listOptions", () => {
    const language: string = "language_example"
    const version: string = "version_example"
    return expect(instance.listOptions(language, version, {})).resolves.toBe(null)
  })
})

describe("DocumentationApi", () => {
  let instance: api.DocumentationApi
  beforeEach(function() {
    instance = new api.DocumentationApi(config)
  });

  test("clientLanguages", () => {
    const version: string = "version_example"
    const clientOnly: boolean = true
    return expect(instance.clientLanguages(version, clientOnly, {})).resolves.toBe(null)
  })
  test("documentationLanguages", () => {
    const version: string = "version_example"
    return expect(instance.documentationLanguages(version, {})).resolves.toBe(null)
  })
  test("generate", () => {
    const body: api.GenerationRequest = undefined
    return expect(instance.generate(body, {})).resolves.toBe(null)
  })
  test("generateFromURL", () => {
    const codegenOptionsURL: string = "codegenOptionsURL_example"
    return expect(instance.generateFromURL(codegenOptionsURL, {})).resolves.toBe(null)
  })
  test("languages", () => {
    const type: string = "type_example"
    const version: string = "version_example"
    return expect(instance.languages(type, version, {})).resolves.toBe(null)
  })
  test("languagesMulti", () => {
    const types: Array<string> = undefined
    const version: string = "version_example"
    return expect(instance.languagesMulti(types, version, {})).resolves.toBe(null)
  })
  test("listOptions", () => {
    const language: string = "language_example"
    const version: string = "version_example"
    return expect(instance.listOptions(language, version, {})).resolves.toBe(null)
  })
})

describe("ServersApi", () => {
  let instance: api.ServersApi
  beforeEach(function() {
    instance = new api.ServersApi(config)
  });

  test("generate", () => {
    const body: api.GenerationRequest = undefined
    return expect(instance.generate(body, {})).resolves.toBe(null)
  })
  test("generateFromURL", () => {
    const codegenOptionsURL: string = "codegenOptionsURL_example"
    return expect(instance.generateFromURL(codegenOptionsURL, {})).resolves.toBe(null)
  })
  test("languages", () => {
    const type: string = "type_example"
    const version: string = "version_example"
    return expect(instance.languages(type, version, {})).resolves.toBe(null)
  })
  test("languagesMulti", () => {
    const types: Array<string> = undefined
    const version: string = "version_example"
    return expect(instance.languagesMulti(types, version, {})).resolves.toBe(null)
  })
  test("listOptions", () => {
    const language: string = "language_example"
    const version: string = "version_example"
    return expect(instance.listOptions(language, version, {})).resolves.toBe(null)
  })
  test("serverLanguages", () => {
    const version: string = "version_example"
    return expect(instance.serverLanguages(version, {})).resolves.toBe(null)
  })
})

