/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Swagger Generator
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 3.0.21
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
 * @export
 * @interface AuthorizationValue
 */
export interface AuthorizationValue {
    /**
     * Authorization value
     * @type {string}
     * @memberof AuthorizationValue
     */
    value?: string;
    /**
     * Authorization key
     * @type {string}
     * @memberof AuthorizationValue
     */
    keyName?: string;
    /**
     * Authorization type
     * @type {string}
     * @memberof AuthorizationValue
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface CliOption
 */
export interface CliOption {
    /**
     * 
     * @type {string}
     * @memberof CliOption
     */
    optionName?: string;
    /**
     * 
     * @type {string}
     * @memberof CliOption
     */
    description?: string;
    /**
     * Data type is based on the types supported by the JSON-Schema
     * @type {string}
     * @memberof CliOption
     */
    type?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CliOption
     */
    _enum?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof CliOption
     */
    _default?: string;
}
/**
 * 
 * @export
 * @interface GenerationRequest
 */
export interface GenerationRequest {
    /**
     * language to generate (required)
     * @type {string}
     * @memberof GenerationRequest
     */
    lang: string;
    /**
     * spec in json format. . Alternative to `specURL`
     * @type {any}
     * @memberof GenerationRequest
     */
    spec?: any;
    /**
     * URL of the spec in json format. Alternative to `spec`
     * @type {string}
     * @memberof GenerationRequest
     */
    specURL?: string;
    /**
     * type of the spec
     * @type {string}
     * @memberof GenerationRequest
     */
    type?: GenerationRequest.TypeEnum;
    /**
     * codegen version to use
     * @type {string}
     * @memberof GenerationRequest
     */
    codegenVersion?: GenerationRequest.CodegenVersionEnum;
    /**
     * 
     * @type {Options}
     * @memberof GenerationRequest
     */
    options?: Options;
}

/**
 * @export
 * @namespace GenerationRequest
 */
export namespace GenerationRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        CLIENT = <any> 'CLIENT',
        SERVER = <any> 'SERVER',
        DOCUMENTATION = <any> 'DOCUMENTATION',
        CONFIG = <any> 'CONFIG'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum CodegenVersionEnum {
        V2 = <any> 'V2',
        V3 = <any> 'V3'
    }
}
/**
 * 
 * @export
 * @interface Options
 */
export interface Options {
    /**
     * adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
     * @type {string}
     * @memberof Options
     */
    auth?: string;
    /**
     * 
     * @type {AuthorizationValue}
     * @memberof Options
     */
    authorizationValue?: AuthorizationValue;
    /**
     * package for generated api classes
     * @type {string}
     * @memberof Options
     */
    apiPackage?: string;
    /**
     * template version for generation
     * @type {string}
     * @memberof Options
     */
    templateVersion?: string;
    /**
     * package for generated models
     * @type {string}
     * @memberof Options
     */
    modelPackage?: string;
    /**
     * Prefix that will be prepended to all model names. Default is the empty string.
     * @type {string}
     * @memberof Options
     */
    modelNamePrefix?: string;
    /**
     * PrefixSuffix that will be appended to all model names. Default is the empty string.
     * @type {string}
     * @memberof Options
     */
    modelNameSuffix?: string;
    /**
     * sets specified system properties in key/value format
     * @type {{ [key: string]: string; }}
     * @memberof Options
     */
    systemProperties?: { [key: string]: string; };
    /**
     * sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
     * @type {{ [key: string]: string; }}
     * @memberof Options
     */
    instantiationTypes?: { [key: string]: string; };
    /**
     * sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
     * @type {{ [key: string]: string; }}
     * @memberof Options
     */
    typeMappings?: { [key: string]: string; };
    /**
     * sets additional properties that can be referenced by the mustache templates in key/value format.
     * @type {{ [key: string]: any; }}
     * @memberof Options
     */
    additionalProperties?: { [key: string]: any; };
    /**
     * specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
     * @type {Array<string>}
     * @memberof Options
     */
    languageSpecificPrimitives?: Array<string>;
    /**
     * specifies mappings between a given class and the import that should be used for that class in key/value format.
     * @type {{ [key: string]: string; }}
     * @memberof Options
     */
    importMappings?: { [key: string]: string; };
    /**
     * root package for generated code
     * @type {string}
     * @memberof Options
     */
    invokerPackage?: string;
    /**
     * groupId in generated pom.xml
     * @type {string}
     * @memberof Options
     */
    groupId?: string;
    /**
     * artifactId in generated pom.xml
     * @type {string}
     * @memberof Options
     */
    artifactId?: string;
    /**
     * artifact version generated in pom.xml
     * @type {string}
     * @memberof Options
     */
    artifactVersion?: string;
    /**
     * library template (sub-template)
     * @type {string}
     * @memberof Options
     */
    library?: string;
    /**
     * Git user ID, e.g. swagger-api.
     * @type {string}
     * @memberof Options
     */
    gitUserId?: string;
    /**
     * Git repo ID, e.g. swagger-codegen.
     * @type {string}
     * @memberof Options
     */
    gitRepoId?: string;
    /**
     * Release note, default to 'Minor update'.
     * @type {string}
     * @memberof Options
     */
    releaseNote?: string;
    /**
     * HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
     * @type {string}
     * @memberof Options
     */
    httpUserAgent?: string;
    /**
     * pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
     * @type {{ [key: string]: string; }}
     * @memberof Options
     */
    reservedWordsMappings?: { [key: string]: string; };
    /**
     * Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
     * @type {string}
     * @memberof Options
     */
    ignoreFileOverride?: string;
    /**
     * Remove prefix of operationId, e.g. config_getId => getId
     * @type {boolean}
     * @memberof Options
     */
    removeOperationIdPrefix?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Options
     */
    skipOverride?: boolean;
}
/**
 * ClientsApi - fetch parameter creator
 * @export
 */
export const ClientsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {boolean} [clientOnly] flag to only return languages of type &#x60;client&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientLanguages(version?: string, clientOnly?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/clients`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (clientOnly !== undefined) {
                localVarQueryParameter['clientOnly'] = clientOnly;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options: any = {}): FetchArgs {
            const localVarPath = `/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GenerationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options: any = {}): FetchArgs {
            // verify required parameter 'codegenOptionsURL' is not null or undefined
            if (codegenOptionsURL === null || codegenOptionsURL === undefined) {
                throw new RequiredError('codegenOptionsURL','Required parameter codegenOptionsURL was null or undefined when calling generateFromURL.');
            }
            const localVarPath = `/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codegenOptionsURL !== undefined) {
                localVarQueryParameter['codegenOptionsURL'] = codegenOptionsURL;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling languages.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling languages.');
            }
            const localVarPath = `/{type}/{version}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'types' is not null or undefined
            if (types === null || types === undefined) {
                throw new RequiredError('types','Required parameter types was null or undefined when calling languagesMulti.');
            }
            const localVarPath = `/types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS["csv"]);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options: any = {}): FetchArgs {
            const localVarPath = `/options`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {boolean} [clientOnly] flag to only return languages of type &#x60;client&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientLanguages(version?: string, clientOnly?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).clientLanguages(version, clientOnly, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).generate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).generateFromURL(codegenOptionsURL, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).languages(type, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).languagesMulti(types, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: CliOption; }> {
            const localVarFetchArgs = ClientsApiFetchParamCreator(configuration).listOptions(language, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {boolean} [clientOnly] flag to only return languages of type &#x60;client&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientLanguages(version?: string, clientOnly?: boolean, options?: any) {
            return ClientsApiFp(configuration).clientLanguages(version, clientOnly, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options?: any) {
            return ClientsApiFp(configuration).generate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options?: any) {
            return ClientsApiFp(configuration).generateFromURL(codegenOptionsURL, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options?: any) {
            return ClientsApiFp(configuration).languages(type, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options?: any) {
            return ClientsApiFp(configuration).languagesMulti(types, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options?: any) {
            return ClientsApiFp(configuration).listOptions(language, version, options)(fetch, basePath);
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
     * @param {string} [version] generator version used by codegen engine
     * @param {boolean} [clientOnly] flag to only return languages of type &#x60;client&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientLanguages(version?: string, clientOnly?: boolean, options?: any) {
        return ClientsApiFp(this.configuration).clientLanguages(version, clientOnly, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates and download code. GenerationRequest input provided as request body.
     * @param {GenerationRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public generate(body?: GenerationRequest, options?: any) {
        return ClientsApiFp(this.configuration).generate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
     * @param {string} codegenOptionsURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public generateFromURL(codegenOptionsURL: string, options?: any) {
        return ClientsApiFp(this.configuration).generateFromURL(codegenOptionsURL, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List generator languages of the given type and version
     * @param {string} type generator type
     * @param {string} version generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public languages(type: string, version: string, options?: any) {
        return ClientsApiFp(this.configuration).languages(type, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
     * @param {Array<string>} types comma-separated list of generator types
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public languagesMulti(types: Array<string>, version?: string, options?: any) {
        return ClientsApiFp(this.configuration).languagesMulti(types, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns options for a given language and version (defaults to V3)
     * @param {string} [language] language
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public listOptions(language?: string, version?: string, options?: any) {
        return ClientsApiFp(this.configuration).listOptions(language, version, options)(this.fetch, this.basePath);
    }

}
/**
 * ConfigApi - fetch parameter creator
 * @export
 */
export const ConfigApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options: any = {}): FetchArgs {
            const localVarPath = `/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GenerationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options: any = {}): FetchArgs {
            // verify required parameter 'codegenOptionsURL' is not null or undefined
            if (codegenOptionsURL === null || codegenOptionsURL === undefined) {
                throw new RequiredError('codegenOptionsURL','Required parameter codegenOptionsURL was null or undefined when calling generateFromURL.');
            }
            const localVarPath = `/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codegenOptionsURL !== undefined) {
                localVarQueryParameter['codegenOptionsURL'] = codegenOptionsURL;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling languages.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling languages.');
            }
            const localVarPath = `/{type}/{version}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'types' is not null or undefined
            if (types === null || types === undefined) {
                throw new RequiredError('types','Required parameter types was null or undefined when calling languagesMulti.');
            }
            const localVarPath = `/types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS["csv"]);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options: any = {}): FetchArgs {
            const localVarPath = `/options`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).generate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).generateFromURL(codegenOptionsURL, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).languages(type, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).languagesMulti(types, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: CliOption; }> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).listOptions(language, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options?: any) {
            return ConfigApiFp(configuration).generate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options?: any) {
            return ConfigApiFp(configuration).generateFromURL(codegenOptionsURL, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options?: any) {
            return ConfigApiFp(configuration).languages(type, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options?: any) {
            return ConfigApiFp(configuration).languagesMulti(types, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options?: any) {
            return ConfigApiFp(configuration).listOptions(language, version, options)(fetch, basePath);
        },
    };
};

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI {
    /**
     * 
     * @summary Generates and download code. GenerationRequest input provided as request body.
     * @param {GenerationRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public generate(body?: GenerationRequest, options?: any) {
        return ConfigApiFp(this.configuration).generate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
     * @param {string} codegenOptionsURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public generateFromURL(codegenOptionsURL: string, options?: any) {
        return ConfigApiFp(this.configuration).generateFromURL(codegenOptionsURL, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List generator languages of the given type and version
     * @param {string} type generator type
     * @param {string} version generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public languages(type: string, version: string, options?: any) {
        return ConfigApiFp(this.configuration).languages(type, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
     * @param {Array<string>} types comma-separated list of generator types
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public languagesMulti(types: Array<string>, version?: string, options?: any) {
        return ConfigApiFp(this.configuration).languagesMulti(types, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns options for a given language and version (defaults to V3)
     * @param {string} [language] language
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public listOptions(language?: string, version?: string, options?: any) {
        return ConfigApiFp(this.configuration).listOptions(language, version, options)(this.fetch, this.basePath);
    }

}
/**
 * DocumentationApi - fetch parameter creator
 * @export
 */
export const DocumentationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {boolean} [clientOnly] flag to only return languages of type &#x60;client&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientLanguages(version?: string, clientOnly?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/clients`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (clientOnly !== undefined) {
                localVarQueryParameter['clientOnly'] = clientOnly;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentationLanguages(version?: string, options: any = {}): FetchArgs {
            const localVarPath = `/documentation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options: any = {}): FetchArgs {
            const localVarPath = `/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GenerationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options: any = {}): FetchArgs {
            // verify required parameter 'codegenOptionsURL' is not null or undefined
            if (codegenOptionsURL === null || codegenOptionsURL === undefined) {
                throw new RequiredError('codegenOptionsURL','Required parameter codegenOptionsURL was null or undefined when calling generateFromURL.');
            }
            const localVarPath = `/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codegenOptionsURL !== undefined) {
                localVarQueryParameter['codegenOptionsURL'] = codegenOptionsURL;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling languages.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling languages.');
            }
            const localVarPath = `/{type}/{version}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'types' is not null or undefined
            if (types === null || types === undefined) {
                throw new RequiredError('types','Required parameter types was null or undefined when calling languagesMulti.');
            }
            const localVarPath = `/types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS["csv"]);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options: any = {}): FetchArgs {
            const localVarPath = `/options`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentationApi - functional programming interface
 * @export
 */
export const DocumentationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {boolean} [clientOnly] flag to only return languages of type &#x60;client&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientLanguages(version?: string, clientOnly?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = DocumentationApiFetchParamCreator(configuration).clientLanguages(version, clientOnly, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentationLanguages(version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = DocumentationApiFetchParamCreator(configuration).documentationLanguages(version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = DocumentationApiFetchParamCreator(configuration).generate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = DocumentationApiFetchParamCreator(configuration).generateFromURL(codegenOptionsURL, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = DocumentationApiFetchParamCreator(configuration).languages(type, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = DocumentationApiFetchParamCreator(configuration).languagesMulti(types, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: CliOption; }> {
            const localVarFetchArgs = DocumentationApiFetchParamCreator(configuration).listOptions(language, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DocumentationApi - factory interface
 * @export
 */
export const DocumentationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {boolean} [clientOnly] flag to only return languages of type &#x60;client&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientLanguages(version?: string, clientOnly?: boolean, options?: any) {
            return DocumentationApiFp(configuration).clientLanguages(version, clientOnly, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        documentationLanguages(version?: string, options?: any) {
            return DocumentationApiFp(configuration).documentationLanguages(version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options?: any) {
            return DocumentationApiFp(configuration).generate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options?: any) {
            return DocumentationApiFp(configuration).generateFromURL(codegenOptionsURL, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options?: any) {
            return DocumentationApiFp(configuration).languages(type, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options?: any) {
            return DocumentationApiFp(configuration).languagesMulti(types, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options?: any) {
            return DocumentationApiFp(configuration).listOptions(language, version, options)(fetch, basePath);
        },
    };
};

/**
 * DocumentationApi - object-oriented interface
 * @export
 * @class DocumentationApi
 * @extends {BaseAPI}
 */
export class DocumentationApi extends BaseAPI {
    /**
     * 
     * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
     * @param {string} [version] generator version used by codegen engine
     * @param {boolean} [clientOnly] flag to only return languages of type &#x60;client&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public clientLanguages(version?: string, clientOnly?: boolean, options?: any) {
        return DocumentationApiFp(this.configuration).clientLanguages(version, clientOnly, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public documentationLanguages(version?: string, options?: any) {
        return DocumentationApiFp(this.configuration).documentationLanguages(version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates and download code. GenerationRequest input provided as request body.
     * @param {GenerationRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public generate(body?: GenerationRequest, options?: any) {
        return DocumentationApiFp(this.configuration).generate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
     * @param {string} codegenOptionsURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public generateFromURL(codegenOptionsURL: string, options?: any) {
        return DocumentationApiFp(this.configuration).generateFromURL(codegenOptionsURL, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List generator languages of the given type and version
     * @param {string} type generator type
     * @param {string} version generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public languages(type: string, version: string, options?: any) {
        return DocumentationApiFp(this.configuration).languages(type, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
     * @param {Array<string>} types comma-separated list of generator types
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public languagesMulti(types: Array<string>, version?: string, options?: any) {
        return DocumentationApiFp(this.configuration).languagesMulti(types, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns options for a given language and version (defaults to V3)
     * @param {string} [language] language
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public listOptions(language?: string, version?: string, options?: any) {
        return DocumentationApiFp(this.configuration).listOptions(language, version, options)(this.fetch, this.basePath);
    }

}
/**
 * ServersApi - fetch parameter creator
 * @export
 */
export const ServersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options: any = {}): FetchArgs {
            const localVarPath = `/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GenerationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options: any = {}): FetchArgs {
            // verify required parameter 'codegenOptionsURL' is not null or undefined
            if (codegenOptionsURL === null || codegenOptionsURL === undefined) {
                throw new RequiredError('codegenOptionsURL','Required parameter codegenOptionsURL was null or undefined when calling generateFromURL.');
            }
            const localVarPath = `/generate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codegenOptionsURL !== undefined) {
                localVarQueryParameter['codegenOptionsURL'] = codegenOptionsURL;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling languages.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling languages.');
            }
            const localVarPath = `/{type}/{version}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options: any = {}): FetchArgs {
            // verify required parameter 'types' is not null or undefined
            if (types === null || types === undefined) {
                throw new RequiredError('types','Required parameter types was null or undefined when calling languagesMulti.');
            }
            const localVarPath = `/types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS["csv"]);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options: any = {}): FetchArgs {
            const localVarPath = `/options`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverLanguages(version?: string, options: any = {}): FetchArgs {
            const localVarPath = `/servers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServersApi - functional programming interface
 * @export
 */
export const ServersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ServersApiFetchParamCreator(configuration).generate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ServersApiFetchParamCreator(configuration).generateFromURL(codegenOptionsURL, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = ServersApiFetchParamCreator(configuration).languages(type, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = ServersApiFetchParamCreator(configuration).languagesMulti(types, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{ [key: string]: CliOption; }> {
            const localVarFetchArgs = ServersApiFetchParamCreator(configuration).listOptions(language, version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverLanguages(version?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = ServersApiFetchParamCreator(configuration).serverLanguages(version, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ServersApi - factory interface
 * @export
 */
export const ServersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as request body.
         * @param {GenerationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(body?: GenerationRequest, options?: any) {
            return ServersApiFp(configuration).generate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
         * @param {string} codegenOptionsURL 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFromURL(codegenOptionsURL: string, options?: any) {
            return ServersApiFp(configuration).generateFromURL(codegenOptionsURL, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List generator languages of the given type and version
         * @param {string} type generator type
         * @param {string} version generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languages(type: string, version: string, options?: any) {
            return ServersApiFp(configuration).languages(type, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
         * @param {Array<string>} types comma-separated list of generator types
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languagesMulti(types: Array<string>, version?: string, options?: any) {
            return ServersApiFp(configuration).languagesMulti(types, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Returns options for a given language and version (defaults to V3)
         * @param {string} [language] language
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptions(language?: string, version?: string, options?: any) {
            return ServersApiFp(configuration).listOptions(language, version, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
         * @param {string} [version] generator version used by codegen engine
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serverLanguages(version?: string, options?: any) {
            return ServersApiFp(configuration).serverLanguages(version, options)(fetch, basePath);
        },
    };
};

/**
 * ServersApi - object-oriented interface
 * @export
 * @class ServersApi
 * @extends {BaseAPI}
 */
export class ServersApi extends BaseAPI {
    /**
     * 
     * @summary Generates and download code. GenerationRequest input provided as request body.
     * @param {GenerationRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public generate(body?: GenerationRequest, options?: any) {
        return ServersApiFp(this.configuration).generate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
     * @param {string} codegenOptionsURL 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public generateFromURL(codegenOptionsURL: string, options?: any) {
        return ServersApiFp(this.configuration).generateFromURL(codegenOptionsURL, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List generator languages of the given type and version
     * @param {string} type generator type
     * @param {string} version generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public languages(type: string, version: string, options?: any) {
        return ServersApiFp(this.configuration).languages(type, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
     * @param {Array<string>} types comma-separated list of generator types
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public languagesMulti(types: Array<string>, version?: string, options?: any) {
        return ServersApiFp(this.configuration).languagesMulti(types, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Returns options for a given language and version (defaults to V3)
     * @param {string} [language] language
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public listOptions(language?: string, version?: string, options?: any) {
        return ServersApiFp(this.configuration).listOptions(language, version, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
     * @param {string} [version] generator version used by codegen engine
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public serverLanguages(version?: string, options?: any) {
        return ServersApiFp(this.configuration).serverLanguages(version, options)(this.fetch, this.basePath);
    }

}
